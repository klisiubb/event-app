generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  VOLUNTEER
  LECTURER
}
enum SponsorType {
  DIAMOND
  GOLD
  SILVER
  PARTNER
}
model User {
  id        String  @unique @id
  email     String   @unique
  firstName String
  lastName  String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  QrCode              QrCode[]  @relation(name: "ScannedQRCodes")
  Reward              Reward[]  @relation(name: "RewardWinners")
  role                Role      @default(USER)
  workshopToAttend    Workshop? @relation(name: "WorkshopAttenders", fields: [workshopToAttendId], references: [id], onDelete: Cascade)
  workshopToAttendId  String?
  workshopToLecture    Workshop? @relation(name: "WorkshopLecturers", fields: [workshopToLectureId], references: [id], onDelete: Cascade)
  workshopToLectureId  String?
  lectureToLecture    Lecture? @relation(name: "LectureLecturers", fields: [lectureToLectureId], references: [id], onDelete: Cascade)
  lectureToLectureId  String?
  isPresentAtEvent Boolean  @default(false)
  isPresentAtWorkshop Boolean  @default(false)
  points Int @default(0)
}

model Lecture {
    id           String     @id @default(uuid())
    topic        String     @unique()
    description  String?
    room         String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    isPublished  Boolean    @default(false)
    startDate    DateTime?
    endDate      DateTime?
    imageUrl     String?
    qrcode       QrCode @relation(fields: [ qrCodeId], references: [id], onDelete: Cascade)
    qrCodeId     String @unique
    lectureLecturers User[] @relation(name: "LectureLecturers")
}
model Workshop {
    id           String     @id @default(uuid())
    topic        String     @unique()
    description  String?
    room         String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    isPublished  Boolean    @default(false)
    startDate    DateTime?
    endDate      DateTime?
    imageUrl     String?
    maxAttenders Int?
    qrcode       QrCode @relation(fields: [ qrCodeId], references: [id], onDelete: Cascade)
    qrCodeId     String @unique
    attenders    User[]     @relation(name: "WorkshopAttenders")
    workshopLecturers User[] @relation(name: "WorkshopLecturers")
}
model QrCode {
  id          String    @id @default(uuid())
  name        String
  value       Int?
  base64      String?
  maxUses     Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublished Boolean   @default(false)
  scannedBy   User[]    @relation(name: "ScannedQRCodes")
  lecture Lecture?
  workshop Workshop?
  Sponsor     Sponsor?  @relation(name: "SponsorQRCode")
}
model Reward {
  id          String   @id @default(uuid())
  name        String   @unique()
  description String?
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  winners     User[]   @relation(name: "RewardWinners")
  imageUrl     String?
}
model Sponsor {
  id          String      @id @default(uuid())
  name        String
  description String?
  imageUrl     String?
  websiteUrl         String?
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        SponsorType @default(PARTNER)
  qrCode      QrCode?     @relation(name: "SponsorQRCode", fields: [qrCodeId], references: [id], onDelete: Cascade)
  qrCodeId    String?     @unique
}